"use strict";(self.webpackChunk_urturn_docs=self.webpackChunk_urturn_docs||[]).push([[5525],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),m=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||p[d]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<a;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8495:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var o=n(5773),r=(n(7378),n(5318));const a={description:"Tell UrTurn how to change state on various room events"},i="Room Functions",l={unversionedId:"API/room-functions",id:"API/room-functions",title:"Room Functions",description:"Tell UrTurn how to change state on various room events",source:"@site/docs/2-API/0-room-functions.md",sourceDirName:"2-API",slug:"/API/room-functions",permalink:"/docs/API/room-functions",draft:!1,editUrl:"https://github.com/turnbasedgames/urturn/tree/main/docs/docs/2-API/0-room-functions.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{description:"Tell UrTurn how to change state on various room events"},sidebar:"docs",previous:{title:"API",permalink:"/docs/category/api"},next:{title:"Client",permalink:"/docs/API/client"}},s={},m=[{value:"Flow",id:"flow",level:2},{value:"Pure Functions",id:"pure-functions",level:2},{value:"ACID Transactions",id:"acid-transactions",level:2},{value:"<code>onRoomStart</code> <strong>Required</strong>",id:"onroomstart-required",level:2},{value:"<code>onPlayerJoin</code> <strong>Required</strong>",id:"onplayerjoin-required",level:2},{value:"<code>onPlayerQuit</code> <strong>Required</strong>",id:"onplayerquit-required",level:2},{value:"<code>onPlayerMove</code> <strong>Required</strong>",id:"onplayermove-required",level:2}],u={toc:m};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"room-functions"},"Room Functions"),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"These are the functions that you define to handle various events and tell UrTurn how to update the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/types#roomstate"},(0,r.kt)("inlineCode",{parentName:"a"},"roomState"))," for a room.")),(0,r.kt)("h2",{id:"flow"},"Flow"),(0,r.kt)("p",null,"All functions follow this flow when handling an event:\n",(0,r.kt)("img",{alt:"function flow",src:n(8536).Z,width:"686",height:"478"})),(0,r.kt)("h2",{id:"pure-functions"},"Pure Functions"),(0,r.kt)("p",null,"All room functions are ",(0,r.kt)("inlineCode",{parentName:"p"},"pure"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"return values are identical for identical arguments."),(0,r.kt)("li",{parentName:"ol"},"has no side effects within the function itself.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Avoid modifying any variables scoped outside of the function, as there is ",(0,r.kt)("strong",{parentName:"p"},"no guarantee")," those modifications will last within the same room and may affect other rooms.")),(0,r.kt)("p",null,"Using ",(0,r.kt)("strong",{parentName:"p"},"global constants is fine"),", or loading in constants from an external file."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Common mistake is to forget returning the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/types#roomstateresult"},(0,r.kt)("inlineCode",{parentName:"a"},"roomStateResult")),". Make sure you are returning any resulting state, otherwise the changes will not be applied!")),(0,r.kt)("h2",{id:"acid-transactions"},"ACID Transactions"),(0,r.kt)("p",null,"All room functions are ACID transactions:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Atomic"),": either all updates returned are fully completed or completely fail. This is important for handling functions like player purchases; you don\u2019t want a player to be charged Urbux and fail to give them their desired item. This prevents data corruption of your roomState."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Consistent"),": your functions will never be given partial data or corrupt data; they will always get the latest ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#roomstate"},(0,r.kt)("inlineCode",{parentName:"a"},"roomState"))," for the room."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Isolated"),": you are guaranteed that functions for a given room are handled one by one. No two functions can corrupt each other."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Durable"),": successful room functions are guaranteed to survive system failure. Even if UrTurn goes down, or has partial outages, your data for each room should survive.")),(0,r.kt)("h2",{id:"onroomstart-required"},(0,r.kt)("inlineCode",{parentName:"h2"},"onRoomStart")," ",(0,r.kt)("strong",{parentName:"h2"},"Required")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onRoomStart = (roomState: RoomState) => RoomStateResult\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use this function to initialize your board game state."),(0,r.kt)("li",{parentName:"ul"},"Runs when the room is first initialized, as triggered by these actions:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"When a private room is created (player clicks ",(0,r.kt)("em",{parentName:"li"},"Create Private Room"),")."),(0,r.kt)("li",{parentName:"ol"},"When a room is created for the matchmaking queue (player clicks ",(0,r.kt)("em",{parentName:"li"},"Play"),")."))),(0,r.kt)("li",{parentName:"ul"},"Fails on error (when user clicks play or attempts start a game, it will show them an error and will not start the game)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Returns")," the ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#roomstateresult"},"RoomStateResult"),".")),(0,r.kt)("h2",{id:"onplayerjoin-required"},(0,r.kt)("inlineCode",{parentName:"h2"},"onPlayerJoin")," ",(0,r.kt)("strong",{parentName:"h2"},"Required")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onPlayerJoin = (player: Player, roomState: RoomState) => RoomStateResult\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Runs when a player joins the room, including when the room is created (i.e. the player clicks ",(0,r.kt)("em",{parentName:"li"},"Play")," or ",(0,r.kt)("em",{parentName:"li"},"Create Private Room"),")."),(0,r.kt)("li",{parentName:"ul"},"Fails on error (when user clicks play and joins a game, it will show them an error snackbar)."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"roomState.joinable")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"roomState.finished")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," then it is ",(0,r.kt)("strong",{parentName:"li"},"guaranteed")," that no player will be added to the room and ",(0,r.kt)("inlineCode",{parentName:"li"},"onPlayerJoin")," will never be called for a player."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Returns")," the ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#roomstateresult"},"RoomStateResult"),".")),(0,r.kt)("h2",{id:"onplayerquit-required"},(0,r.kt)("inlineCode",{parentName:"h2"},"onPlayerQuit")," ",(0,r.kt)("strong",{parentName:"h2"},"Required")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onPlayerQuit = (player: Player, roomState: RoomState) => RoomStateResult\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Runs when a player quits the game."),(0,r.kt)("li",{parentName:"ul"},"A player can quit the game by manually clicking the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"quit"))," button."),(0,r.kt)("li",{parentName:"ul"},"Only players in the room, can quit the room (e.g. we can't call ",(0,r.kt)("inlineCode",{parentName:"li"},"onPlayerQuit")," with a player not known to the room)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Returns")," the ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#roomstateresult"},"RoomStateResult"),".")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerQuit")," is ",(0,r.kt)("strong",{parentName:"p"},"forced"),". Even if an error occurs in your code, we will force our own logic to be executed (e.g. removing ",(0,r.kt)("inlineCode",{parentName:"p"},"player")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"roomState.players")," list)."),(0,r.kt)("p",{parentName:"admonition"},"This may put the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/types#roomstate"},(0,r.kt)("inlineCode",{parentName:"a"},"roomState"))," for the room in a corrupt state depending on your code, so you should avoid erroring in this function.")),(0,r.kt)("h2",{id:"onplayermove-required"},(0,r.kt)("inlineCode",{parentName:"h2"},"onPlayerMove")," ",(0,r.kt)("strong",{parentName:"h2"},"Required")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onPlayerMove = (player: Player, move: Move, roomState: RoomState) => RoomStateResult\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Runs when a player moves (i.e. when ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/client#clientmakemovemove-move"},(0,r.kt)("inlineCode",{parentName:"a"},"client.makeMove()"))," is called with the ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#move"},(0,r.kt)("inlineCode",{parentName:"a"},"move"))," JSON object)."),(0,r.kt)("li",{parentName:"ul"},"Fails on error. The client triggering this will receive your error as a return value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Returns")," the ",(0,r.kt)("a",{parentName:"li",href:"/docs/API/types#roomstateresult"},"RoomStateResult"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If a player is trying to do something impossible/against game rules, then it is ",(0,r.kt)("strong",{parentName:"p"},"recommended")," to throw an error, so you can handle it in the game frontend.")))}p.isMDXComponent=!0},8536:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/simple_flow-ea296f2342ebb4ef5c5505991729ba11.png"}}]);