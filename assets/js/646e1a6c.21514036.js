"use strict";(self.webpackChunk_urturn_docs=self.webpackChunk_urturn_docs||[]).push([[4367],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(5773),r=(n(7378),n(5318));const a={},i="Concepts",l={unversionedId:"Introduction/Concepts",id:"Introduction/Concepts",title:"Concepts",description:"RoomState",source:"@site/docs/0-Introduction/2-Concepts.md",sourceDirName:"0-Introduction",slug:"/Introduction/Concepts",permalink:"/docs/Introduction/Concepts",draft:!1,editUrl:"https://github.com/turnbasedgames/urturn/docs/0-Introduction/2-Concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"Flow of a Simple Game",permalink:"/docs/Introduction/Flow-Of-Simple-Game"},next:{title:"Getting Started",permalink:"/docs/category/getting-started"}},c={},s=[{value:"RoomState",id:"roomstate",level:2},{value:"Room",id:"room",level:2},{value:"Game",id:"game",level:2},{value:"Automatic Disconnect Handling",id:"automatic-disconnect-handling",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"concepts"},"Concepts"),(0,r.kt)("h2",{id:"roomstate"},"RoomState"),(0,r.kt)("p",null,"All room states follow a structure like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "joinable": true, // boolean\n  "finished": true, // boolean\n  "state": {}, // any JSON object that you define\n  "version": 0, // number\n  "players": [], // array of player objects\n}\n\n')),(0,r.kt)("p",null,"All ",(0,r.kt)("a",{parentName:"p",href:"#room"},(0,r.kt)("inlineCode",{parentName:"a"},"Room"))," operations modify or use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/backend#roomstate"},(0,r.kt)("inlineCode",{parentName:"a"},"roomState"))," to create a new ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/backend#roomstate"},(0,r.kt)("inlineCode",{parentName:"a"},"roomState")),"."),(0,r.kt)("h2",{id:"room"},"Room"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rooms are instances of games."),(0,r.kt)("li",{parentName:"ul"},"Rooms will have an associated RoomState to track the current state of the room."),(0,r.kt)("li",{parentName:"ul"},"Players create new rooms whenever they click play on your game. UrTurn will automatically place players together in a room if it is public."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"private")," rooms are created by players when they click ",(0,r.kt)("inlineCode",{parentName:"li"},"create private room"),", and are usually played with people they already know. You can handle private rooms differently than public rooms; for example, you might want to let the player who created the private room determine the settings of the room."),(0,r.kt)("li",{parentName:"ul"},"If a user accidentally closes their browser, they may reopen it to view the room again (exception: see ",(0,r.kt)("a",{parentName:"li",href:"/docs/Introduction/Concepts#automatic-disconnect-handling"},"disconnectTimeout"),")")),(0,r.kt)("h2",{id:"game"},"Game"),(0,r.kt)("p",null,"Each game can have a thumbnail, title, description, and specific code related to it that is run whenever a room is created."),(0,r.kt)("h2",{id:"automatic-disconnect-handling"},"Automatic Disconnect Handling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When a user is disconnected from a ",(0,r.kt)("inlineCode",{parentName:"li"},"public")," room, the user will be automatically kicked from the room with ",(0,r.kt)("inlineCode",{parentName:"li"},"onPlayerQuit")," after ",(0,r.kt)("inlineCode",{parentName:"li"},"30 seconds"),"."),(0,r.kt)("li",{parentName:"ul"},"This does not apply to ",(0,r.kt)("inlineCode",{parentName:"li"},"private")," rooms! Meaning, even if a player disconnects from a private room indefinitely, they will not be forced out of it.")))}m.isMDXComponent=!0}}]);