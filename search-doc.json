[{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Get the latest on new features, awesome games, upcoming events, and technology from the UrTurn team.","keywords":""},{"title":"Configuring Your Game","type":0,"sectionRef":"#","url":"docs/game-configuration","content":"","keywords":""},{"title":"Game Configuration​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#game-configuration","content":""},{"title":"Name​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#name","content":"The name your game will be searchable as. "},{"title":"GitHub Repo URL​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#github-repo-url","content":"The URL of your GitHub repo with no extra parameters (example: https://github.com/turnbasedgames/tictactoe). "},{"title":"Commit​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#commit","content":"The exact commit on the published branch the you would like in production. This can be obtained with the following command after your GitHub actions have run: git fetch --all git rev-parse origin/published Copy "},{"title":"Description​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#description","content":"A description of your game. "},{"title":"Other​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#other","content":""},{"title":"Thumbnail​","type":1,"pageTitle":"Configuring Your Game","url":"docs/game-configuration#thumbnail","content":"Your thumbnail will be automatically imported from the 'thumbnail.png' file at the highest level of your repo. If there is no file, a fallback photo will be used. "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/getting-started/introduction","content":"Overview This tutorial is comprehensive. You will build the game tic-tac-toe from scratch and deploy it to UrTurn where you will immediately be able to share it and play with your friends. This tutorial is split into several sections: Setting up your local development environmentWalking through the template filesCreating your first game: tic-tac-toeDeploying the game to production and play with your friends!","keywords":""},{"title":"Deploying Your Game","type":0,"sectionRef":"#","url":"docs/getting-started/deploying","content":"","keywords":""},{"title":"1. Push Your Changes​","type":1,"pageTitle":"Deploying Your Game","url":"docs/getting-started/deploying#1-push-your-changes","content":"If you haven't commited your changes yet, go ahead and do so and push to github! git add . git commit -m &quot;first commit!&quot; git push Copy "},{"title":"2. Wait For GitHub Actions​","type":1,"pageTitle":"Deploying Your Game","url":"docs/getting-started/deploying#2-wait-for-github-actions","content":"An automatic GitHub action will run to build your project and deploy it to a branch called published. To watch your branches project, visit your repo's '/actions' page. "},{"title":"3. Get Your Commit SHA​","type":1,"pageTitle":"Deploying Your Game","url":"docs/getting-started/deploying#3-get-your-commit-sha","content":"You now need to find the commit containing the correct file versions you want to serve on UrTurn. You can access this through the GitHub UI or by running the following command after the branch has been created by your GitHub action: git fetch --all git rev-parse origin/published Copy "},{"title":"4. Deploy to UrTurn!​","type":1,"pageTitle":"Deploying Your Game","url":"docs/getting-started/deploying#4-deploy-to-urturn","content":"Go to your developer console and click Create Game. Give your game a name, link your github repo (no additional parameters! An example URL: https://github.com/turnbasedgames/tictactoe), paste your commit hash, and add a description. Click Create, and your game is now playable! "},{"title":"Walking Through the Template Files","type":0,"sectionRef":"#","url":"docs/getting-started/template-files","content":"","keywords":""},{"title":"index.js​","type":1,"pageTitle":"Walking Through the Template Files","url":"docs/getting-started/template-files#indexjs","content":"This is the &quot;backend&quot; for your game. It contains all of the logic that UrTurn needs to make the game playable. It currently contains four functions: onRoomStartonPlayerJoinonPlayerQuitonPlayerMove We'll go over what these functions do and how we will implement them in the next section. Or you can view their documentation directly. "},{"title":"frontend​","type":1,"pageTitle":"Walking Through the Template Files","url":"docs/getting-started/template-files#frontend","content":"This is where the frontend for our game will go. We are currently using React to create our frontend. We will be working inside the frontend/src folder to create our components. When we finish, we will run npm run build, which will create a compiled build in the frontend/build folder for UrTurn to serve. "},{"title":"publish.yml​","type":1,"pageTitle":"Walking Through the Template Files","url":"docs/getting-started/template-files#publishyml","content":"This file will trigger the creation of a branch called published and an automatic build of your frontend whenever a commit gets merged into your main branch, which UrTurn will then serve. "},{"title":"Setting Up Your Environment","type":0,"sectionRef":"#","url":"docs/getting-started/setting-up","content":"","keywords":""},{"title":"1. Prerequisites​","type":1,"pageTitle":"Setting Up Your Environment","url":"docs/getting-started/setting-up#1-prerequisites","content":"NodeJSGitA basic understanding of JavaScript and ReactJS "},{"title":"2. Fork the TurnBasedGames/tictactoe repository​","type":1,"pageTitle":"Setting Up Your Environment","url":"docs/getting-started/setting-up#2-fork-the-turnbasedgamestictactoe-repository","content":"Navigate to github.com/turnbasedgames/tictactoe, fork the repository, and clone it locally. Then run the following commands: npm install npm run dev Copy You should see the UrTurn Runner at work, which allows you to develop your games both locally and offline. You will see the initial server console, with no players in the game yet. "},{"title":"Understanding the Backend","type":0,"sectionRef":"#","url":"docs/backend","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#overview","content":"The &quot;backend&quot; for all games is compromised of four functions found in the highest level index.js file. Currently, for this file to work you cannot import any outside functions - all of your code must be in this file. "},{"title":"Objects​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#objects","content":""},{"title":"BoardGame​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#boardgame","content":"{ joinable: boolean, finished: boolean, players: Player[], version: number, state: {} } Copy A JSON object provided to you that contains information about the current board game state. joinable: boolean​ Initially true. If true, new users will be able to join this game instance. If false, new users can not join this game instance via a private room or matchmaking. finished: boolean​ Initially false. If true, no new changes can be made to the board game state, no new players can join, and the game instance will show in the &quot;Played Games&quot; list. If false, the game will show in the &quot;Active Games&quot; list for players. players: Player[]​ Initially empty. A list of the player objects in the game in the order the players joined. Will update as players join and leave the game instance. version: int​ Initially 0. The current version of the board game state. Incremented with every change. Is used to keep all players in sync with the current board game state. state: JSON object​ Initially empty, can be modified to any configuration. Can hold any valid JSON object and is only used internally in your game logic. "},{"title":"BoardGameResult​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#boardgameresult","content":"{ joinable: boolean, finished: boolean, state: {} } Copy A JSON object that your functions can return - contains the aspects of the BoardGame that have been modified. Will be used to update your BoardGame object. "},{"title":"Player​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#player","content":"{ id: string, username: string } Copy An object representing a single player. "},{"title":"Functions​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#functions","content":""},{"title":"onRoomStart​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#onroomstart","content":"onRoomStart = () =&gt; BoardGameResult Copy Runs when the room is first initialized, as triggered by these actions: When a private room is created (player clicks Create Private Room)When a room is created for the matchmaking queue (player clicks Play) Returns the BoardGameResult. Use this function to initialize your board game state. "},{"title":"onPlayerJoin​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#onplayerjoin","content":"onPlayerJoin = (player: Player, boardGame: object) =&gt; BoardGameResult Copy Runs when a player joins the room, including when the room is created (i.e. the player clicks Play or Create Private Room). Reveals the player who joined and the current BoardGame state. Returns the BoardGameResult. "},{"title":"onPlayerQuit​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#onplayerquit","content":"onPlayerQuit = (player: Player, boardGame: object) =&gt; BoardGameResult Copy Runs when a player quits the game. A player only quits the game by manually clicking the quit button - closing the browser or tab will not end the game session. Reveals the player who quit and the current BoardGame state. Returns the BoardGameResult. "},{"title":"onPlayerMove​","type":1,"pageTitle":"Understanding the Backend","url":"docs/backend#onplayermove","content":"onPlayerMove = (player: Player, move: object, boardGame: object) =&gt; BoardGameResult Copy Runs when a player moves (i.e. when client.makeMove() is called). Reveals the player that made the move, the object containing the move, and the current BoardGame state. The move object is defined by you and can be any JSON object. Returns the BoardGameResult. "},{"title":"Creating Your First Game!","type":0,"sectionRef":"#","url":"docs/getting-started/create-game","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#overview","content":"We are ready to make our first game - tic-tac-toe! There are two major components of your game: the frontend and the backend. We will go over the basics of each. "},{"title":"The Backend​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#the-backend","content":""},{"title":"What is Board Game State?​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#what-is-board-game-state","content":"Your game state is held in the BoardGame object. You can tell UrTurn if your game is joinable and/or if it is finished. You can also define the &quot;state&quot; object that will define the way the board currently looks. For this tic-tac-toe game, the BoardGame state will look like this: { &quot;players&quot;: &quot;[]&quot;, // controlled by UrTurn &quot;version&quot;: 0, // controlled by UrTurn &quot;joinable&quot;: true, &quot;finished&quot;: false, &quot;state&quot;: { &quot;board&quot;: &quot;[ [null, null, null], [null, null, null], [null, null, null], ]&quot;, &quot;winner&quot;: null } } Copy We will be manipulating the joinable, finished, and state properties of this object to control our game. "},{"title":"Four Functions - That's It!​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#four-functions---thats-it","content":"All of our game logic can be encompassed by the following four functions: 1. onRoomStart​ This function will be called whenever a room is created. When the game starts, we want to initialize our empty BoardGame state, which includes the following for tic-tac-toe: The Board: A 3x3 square, initialized with null values.The Winner: The winner's ID, if there is a winner. Initially null. index.js function onRoomStart() { return { state: { board: [ [null, null, null], [null, null, null], [null, null, null], ], winner: null } }; } Copy 2. onPlayerJoin​ This function will be called whenever a player actually joins the game. It provides us with the ID of the player who joined as well as the current BoardGame state. If this is the first player to join, we will just return an empty object. If this is the second player to join, then the game has all the necessary players and should be marked as unjoinable. index.js function onPlayerJoin(plr, boardGame) { const { players } = boardGame; if (players.length === 2) { return { joinable: false }; } return { }; } Copy 3. onPlayerMove​ This function will be called whenever a player makes a move. It provides us with the ID of the player who made the move, the move object, and the current board game state. We can define the move object as any valid JSON object - for tic-tac-toe, it will be an object containing the x- and y-coordinates of the square they selected. After the move is completed, if we determine the game is over and there is a winner, we will add the winner's ID to our state so it can be displayed on the frontend. SnippetFull Code index.js function onPlayerMove(plr, move, boardGame) { const { state, players } = boardGame; const { board, plrToMoveIndex } = state; const { x, y } = move; const plrMark = getPlrMark(plr, players); board[x][y] = plrMark; const [isEnd, winner] = isEndGame(board, players); if (isEnd) { state.winner = winner; return { state, finished: true }; } return { state }; } Copy 4. onPlayerQuit​ This function will be called whenever a player quits the game. It provides us with the ID of the player who quit and the current board game state. For tic-tac-toe, the game will end if one of the players quits. The game will be marked as unjoinable and finished, and the remaining player will be marked the winner. index.js function onPlayerQuit(plr, boardGame) { const { state, players } = boardGame; if (players.length === 1) { const [winner] = players; state.winner = winner; return { state, joinable: false, finished: true }; } return { joinable: false, finished: true }; } Copy "},{"title":"Frontend​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#frontend","content":"This section will go over how to implement the frontend for our tic-tac-toe so that it is visible to the user. We will be adding our components to frontend/src/App.jsx. This file already contains some logic for you to access the BoardGame object and for any state changes to make to be propagated to your backend. "},{"title":"1. Extract the Board Game State​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#1-extract-the-board-game-state","content":"We will first extract the information we need from the board game state: SnippetFull Code frontend/src/App.jsx const { state: { board } = { board: [ [null, null, null], [null, null, null], [null, null, null] ] } } = boardGame; Copy "},{"title":"2. Create a Tic-Tac-Toe Board​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#2-create-a-tic-tac-toe-board","content":"Using our empty board game, we can render a simple tic-tac-toe board: SnippetFull Code Live Editor function App(props) { return ( &lt;ThemeProvider theme={theme}&gt; &lt;Typography&gt; &lt;Stack margin={2} spacing={1} direction=&quot;row&quot; justifyContent=&quot;center&quot;&gt; &lt;Box&gt; {board.map((row, rowNum) =&gt; ( &lt;Stack key={rowNum} direction=&quot;row&quot;&gt; {row.map((val, colNum) =&gt; ( &lt;Stack key={colNum} direction=&quot;row&quot; justifyContent=&quot;center&quot; alignItems=&quot;center&quot; sx={{ border: 1, borderColor: 'text.primary', height: '100px', width: '100px', }} &gt; &lt;Typography color=&quot;text.primary&quot; fontSize=&quot;60px&quot;&gt; {val} &lt;/Typography&gt; &lt;/Stack&gt; ))} &lt;/Stack&gt; ))} &lt;/Box&gt; &lt;/Stack&gt; &lt;/Typography&gt; &lt;/ThemeProvider&gt; ); } function App(props) { return ( &lt;ThemeProvider theme={theme}&gt; &lt;Typography&gt; &lt;Stack margin={2} spacing={1} direction=&quot;row&quot; justifyContent=&quot;center&quot;&gt; &lt;Box&gt; {board.map((row, rowNum) =&gt; ( &lt;Stack key={rowNum} direction=&quot;row&quot;&gt; {row.map((val, colNum) =&gt; ( &lt;Stack key={colNum} direction=&quot;row&quot; justifyContent=&quot;center&quot; alignItems=&quot;center&quot; sx={{ border: 1, borderColor: 'text.primary', height: '100px', width: '100px', }} &gt; &lt;Typography color=&quot;text.primary&quot; fontSize=&quot;60px&quot;&gt; {val} &lt;/Typography&gt; &lt;/Stack&gt; ))} &lt;/Stack&gt; ))} &lt;/Box&gt; &lt;/Stack&gt; &lt;/Typography&gt; &lt;/ThemeProvider&gt; ); } Result Loading... "},{"title":"3. Add MakeMove()​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#3-add-makemove","content":"We can now add in the ability for a player to make a move. We'll add an onClick handler to each tic-tac-toe square that will send a move containing the x- and y-coordinates (the row and column numbers of the box they clicked on) to the client. UrTurn will handle sending the move to your onPlayerMove function! SnippetFull Code frontend/src/App.jsx onClick={async (event) =&gt; { event.preventDefault(); const move = { x: rowNum, y: colNum }; await client.makeMove(move); }} Copy "},{"title":"Adding a Thumbnail​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#adding-a-thumbnail","content":"We'll now find a suitable thumbnail for our game, such as this one. We'll download it, upload it at the highest level of our folder structure, and rename it &quot;thumbnail.png&quot; (the actual filetype doesn't matter - but it must have this name). "},{"title":"Testing Your Game​","type":1,"pageTitle":"Creating Your First Game!","url":"docs/getting-started/create-game#testing-your-game","content":"We're now ready to test our game! In the Runner, you should see the empty board game state. Click Add Player to add a player to the game. This will open a new tab that simulates what the player will see upon joining. In our game state, &quot;joinable&quot; still says true. We can add an additional player and see that &quot;joinable&quot; is now set to false, as defined in our onPlayerJoin function. You can now simulate playing tic-tac-toe between the two tabs! note You currently must refresh the Runner to see all &quot;state&quot; specific changes. Here is the finished tic-tac-toe game in production, which includes error handling, move validation, player validation, and more! "}]